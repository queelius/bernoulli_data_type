/*               COPYRIGHT NOTICE

    Copyright (C) 2019 Alexander Towell

    This program is free software; you can redistribute
    it and/or modify it under the terms of the
    GNU General Public License as published by
    the Free Software Foundation; either version 2 
    of the License, or (at your option) any later version. 

    This program is distributed in the hope that it
    will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the 
    GNU General Public License for more details at
    http://www.gnu.org/copyleft/gpl.html

    For comments, suggestions and the like, feel free to contact the author at
    queelius@gmail.com
*/

/**
 * INTRODUCTION
 *
 * This is a set of Maxima functions for random approximate sets.
 * 
 *   rv_* are random variables. Each of these random variables have an
 *     corresponding set of functions. Suppose the r.v. is tp and
 *     every r.v. has a function f. Then, f_tp is the function f for
 *     rv_tp.
 * 
 *   pdf_* are probability mass or probability density functions, e.g.,
 *     pdf_tp is the pdf function for rv_tp.
 * 
 *   cdf_* are distribution functions.
 * 
 *   expect_* computes the expectation.
 *
 *   mean_* computes the mean.
 *
 *   variance_* computes the variance.
 *   
 *   skewness_* computes the skewness coefficient        
 *
 *   kurtosis_* computes the kurtosis coefficient
 *
 * Example:
 *
 *   rv_tp(pos, tpr)
 */

put('distrib, 2, 'version) $

defstruct (pair(x,y));
get_x(p) := p@x;
get_y(p) := p@y;

/**
 * The random variable for the uncertain number of true positives given
 * that there are pos positives and the true positive rate is expected to
 * be tpr.
 */
defstruct (rv_tp(pos,tpr));

pdf_tp(tp,o) := binomial(o@pos,tp)*(o@tpr)^(tp)*(1-o@tpr)^(o@pos-tp);
support_tp(o) := new (pair(0,o@pos));
param_tp(o) := o@tpr;

/**
 * computes the expectation of g(rv_*).
 */
expect(g,o) := sum(g(x)*pdf_tp(x,o),x,support_tp(o)@x,support_tp(o)@y);



/**
 * The random variable for the uncertain number of false positives given
 * that there are neg negatives and the false positive rate is expected to
 * be fpr.
 */
defstruct (rv_fp(neg,fpr));



/*************************************************************************************
 * This maxima package defines several functions relating to random approximate sets *
 *************************************************************************************/

/************************************************
 * Random variables for random approximate sets *
 ************************************************/

/**
 * the probability mass function of the uncertain number of true positives given
 * pos positives and true positive rate tpr, denoted by TP(pos,tpr).
 */
pdf_tp(tp,pos,tpr) := binomial(pos,tp)*(tpr)^(tp)*(1-tpr)^(pos-tp);

/**
 * the probability mass function of the uncertain number of false positives given
 * neg negatives and false positive rate fpr, denoted by FP(neg,fpr).
 */
pdf_fp(fp,neg,fpr) := binomial(neg,fp)*(fpr)^(fp)*(1-fpr)^(neg-fp);

/**
 * The probability mass function pdf_fpr(r,fpr,neg) computes the probability that the
 * random false postive roate, denoted by FPR(neg,fpr) = FP(neg,fpr) / neg,
 * realizes value r, where fpr is the expected false positive rate and neg is the
 * given number of negatives.
 */
pdf_fpr(r,fpr,neg) := binomial(neg,x*n)*e^(x*n)*(1-e)^(n-x*n);

/**
 * The denity of the normal approximation of FPR(neg,fpr).
 */
density_fpr_approx(r,fpr,neg):=pdf_normal(r,fpr,sqrt(fpr*(1-fpr)/neg));

/**
 * Approximate FPR(neg,fpr) = FP(neg,fpr) / neg with the normal approximation, where
 * as neg -> infinity FPR(neg,fpr) converges in distribution to N(fpr, fpr(1-fpr)/neg).
 */
fpr_approx(r,fpr,neg) := integrate(fpr_approx_density(y,fpr,neg),y,r-1/(2*neg),r+1/(2*neg));

/**
 * computes the expectation of g(TP(pos,tpr)).
 * if g is the identity, then computes E[TP(pos,tpr)] = pos * tpr.
 */
expect_tp(g,pos,tpr) := sum(g(tp)*pdf_tp(tp,pos,tpr),tp,0,pos);

/**
 * computes the expectation of g(FP(neg,fpr)).
 * if g is the identity, then computes E[FP(neg,fpr)] = neg * fpr.
 */
expect_fp(g,neg,fpr) := sum(g(fp)*pdf_fp(fp,neg,fpr),fp,0,neg);

/*****************************************
 * Power sets of random approximate sets *
 *****************************************/

/**
 * ps_neg computes the number of negative elements in a power set
 * with respect to an objective set with pos positives and neg negatives.
 */
ps_neg(pos,neg) := 2^pos*(2^neg-1);

approx_ps_fp(pos,tpr,neg,fpr) := (2^(pos*tpr)+(log(2))^2/2*pos*tpr*(1-tpr))*(2^(neg*fpr)+(log(2))^2/2*neg*fpr*(1-fpr)-1);

ps_helper(x):= if x=0 then 0
               else 2^x;

/**
 * the uncertain number of false positives in the powerset of a random approximate set is
 * the random variable FP(ps,pos,neg,tpr,fpr) = 2^TP(pos,tpr) * (2^FP(neg,fpr) - 1).
 * this computes the expectation of FP.
 */
ps_fp(pos,tpr,neg,fpr) := expect_tp(ps_helper,pos,tpr)*(expect_fp(ps_helper,neg,fpr)-1);

/**
 * the uncertain false positive rate FP(ps,pos,neg,tpr,fpr) / ps_neg(pos,neg)
 */
ps_fpr(pos,tpr,neg,fpr) := ps_fp(pos,tpr,neg,fpr)/ps_neg(pos,neg);

/**
 * an approximation, as a result of doing a second-order taylor series approximation.
 */
approx_ps_fpr(pos,tpr,neg,fpr) := approx_ps_fp(pos,tpr,neg,fpr)/ps_neg(pos,neg);





